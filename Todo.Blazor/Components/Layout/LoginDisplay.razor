@using BlazorApp2.Models
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.Components.Forms
@using Microsoft.AspNetCore.Components.Routing
@inject NavigationManager NavigationManager
@rendermode InteractiveServer

<AuthorizeView>
    <Authorized>
        <div class="nav-item px-1">
            <NavLink class="nav-link" href="Account/Manage">
                <span class="bi bi-person-fill-nav-menu" aria-hidden="true"></span>@DisplayName
            </NavLink>
        </div>
            <div class="nav-item px-1">
            <button type="submit" class="nav-link" @onclick="LogOut"> |
                <span class="bi bi-arrow-bar-left-nav-menu" aria-hidden="true"></span> Logout
            </button>
        </div>
    </Authorized>
    <NotAuthorized>
        <div class="nav-item px-1">
            <NavLink class="nav-link" href="Account/Register">
                <span class="bi bi-person-nav-menu" aria-hidden="true"></span> Register
            </NavLink>
        </div>
        <div class="nav-item px-1">
            <NavLink class="nav-link" href="auth/Login">
                <span class="bi bi-person-badge-nav-menu" aria-hidden="true"></span> Login
            </NavLink>
        </div>
    </NotAuthorized>
</AuthorizeView>


@inject NavigationManager navigationManager
@inject AuthenticationStateProvider AuthStateProvider;
@code {

    private string? currentUrl;
    private string? DisplayName;

    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; }
    protected override async Task OnInitializedAsync()
    {
        var authState = await authenticationStateTask;
        DisplayName = authState.User.Claims.FirstOrDefault(x => x.Type.Contains("givenname"))?.Value;
        //  editContext = new(model);
    }
    protected async Task RedirectToLogin()
    {
        navigationManager.NavigateTo("/Account/Login");
    }

    protected async Task LogOut()
    {
        var authState = await authenticationStateTask;
        var user = authState.User;

        var authProvider = (JWTAuthenticationProvider)AuthStateProvider;
        await authProvider.UpdateAuthenticationState("");
        navigationManager.NavigateTo("/", true);
    }
}